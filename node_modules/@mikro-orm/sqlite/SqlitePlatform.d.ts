import { EntityProperty } from '@mikro-orm/core';
import { AbstractSqlPlatform } from '@mikro-orm/knex';
import { SqliteSchemaHelper } from './SqliteSchemaHelper';
import { SqliteExceptionConverter } from './SqliteExceptionConverter';
export declare class SqlitePlatform extends AbstractSqlPlatform {
    protected readonly schemaHelper: SqliteSchemaHelper;
    protected readonly exceptionConverter: SqliteExceptionConverter;
    requiresNullableForAlteringColumn(): boolean;
    usesDefaultKeyword(): boolean;
    getCurrentTimestampSQL(length: number): string;
    convertsJsonAutomatically(): boolean;
    allowsComparingTuples(): boolean;
    /**
     * This is used to narrow the value of Date properties as they will be stored as timestamps in sqlite.
     * We use this method to convert Dates to timestamps when computing the changeset, so we have the right
     * data type in the payload as well as in original entity data. Without that, we would end up with diffs
     * including all Date properties, as we would be comparing Date object with timestamp.
     */
    processDateProperty(value: unknown): string | number | Date;
    quoteVersionValue(value: Date | number, prop: EntityProperty): Date | string | number;
    requiresValuesKeyword(): boolean;
    quoteValue(value: any): string;
}
